package com.speedata.device.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GPSSATELLITE".
*/
public class GPSSatelliteDao extends AbstractDao<GPSSatellite, Long> {

    public static final String TABLENAME = "GPSSATELLITE";

    /**
     * Properties of entity GPSSatellite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CollectTime = new Property(1, String.class, "collectTime", false, "collectTime");
        public final static Property Ephemeris = new Property(2, boolean.class, "Ephemeris", false, "Ephemeris");
        public final static Property Almanac = new Property(3, boolean.class, "Almanac", false, "Almanac");
        public final static Property Prn = new Property(4, int.class, "Prn", false, "Prn");
        public final static Property Snr = new Property(5, float.class, "Snr", false, "Snr");
        public final static Property Elevation = new Property(6, float.class, "Elevation", false, "Elevation");
        public final static Property Azimuth = new Property(7, float.class, "Azimuth", false, "Azimuth");
    }


    public GPSSatelliteDao(DaoConfig config) {
        super(config);
    }
    
    public GPSSatelliteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GPSSATELLITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"collectTime\" TEXT," + // 1: collectTime
                "\"Ephemeris\" INTEGER NOT NULL ," + // 2: Ephemeris
                "\"Almanac\" INTEGER NOT NULL ," + // 3: Almanac
                "\"Prn\" INTEGER NOT NULL ," + // 4: Prn
                "\"Snr\" REAL NOT NULL ," + // 5: Snr
                "\"Elevation\" REAL NOT NULL ," + // 6: Elevation
                "\"Azimuth\" REAL NOT NULL );"); // 7: Azimuth
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GPSSATELLITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GPSSatellite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String collectTime = entity.getCollectTime();
        if (collectTime != null) {
            stmt.bindString(2, collectTime);
        }
        stmt.bindLong(3, entity.getEphemeris() ? 1L: 0L);
        stmt.bindLong(4, entity.getAlmanac() ? 1L: 0L);
        stmt.bindLong(5, entity.getPrn());
        stmt.bindDouble(6, entity.getSnr());
        stmt.bindDouble(7, entity.getElevation());
        stmt.bindDouble(8, entity.getAzimuth());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GPSSatellite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String collectTime = entity.getCollectTime();
        if (collectTime != null) {
            stmt.bindString(2, collectTime);
        }
        stmt.bindLong(3, entity.getEphemeris() ? 1L: 0L);
        stmt.bindLong(4, entity.getAlmanac() ? 1L: 0L);
        stmt.bindLong(5, entity.getPrn());
        stmt.bindDouble(6, entity.getSnr());
        stmt.bindDouble(7, entity.getElevation());
        stmt.bindDouble(8, entity.getAzimuth());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GPSSatellite readEntity(Cursor cursor, int offset) {
        GPSSatellite entity = new GPSSatellite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // collectTime
            cursor.getShort(offset + 2) != 0, // Ephemeris
            cursor.getShort(offset + 3) != 0, // Almanac
            cursor.getInt(offset + 4), // Prn
            cursor.getFloat(offset + 5), // Snr
            cursor.getFloat(offset + 6), // Elevation
            cursor.getFloat(offset + 7) // Azimuth
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GPSSatellite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCollectTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEphemeris(cursor.getShort(offset + 2) != 0);
        entity.setAlmanac(cursor.getShort(offset + 3) != 0);
        entity.setPrn(cursor.getInt(offset + 4));
        entity.setSnr(cursor.getFloat(offset + 5));
        entity.setElevation(cursor.getFloat(offset + 6));
        entity.setAzimuth(cursor.getFloat(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GPSSatellite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GPSSatellite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GPSSatellite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
